import React, { useState, useMemo, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView, Dimensions } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { Calendar } from 'react-native-calendars';
import { useNavigation } from '@react-navigation/native';
import { PieChart } from 'react-native-chart-kit';
import Swiper from 'react-native-swiper';

const screenWidth = Dimensions.get('window').width;

const CalendarMain = () => {
  const today = new Date().toISOString().split('T')[0];
  const currentMonthDefault = today.slice(0, 7);
  const navigation = useNavigation();

  const [selectedDate, setSelectedDate] = useState(today);
  const [searchMonth, setSearchMonth] = useState(currentMonthDefault.split('-')[1]);
  const [searchYear, setSearchYear] = useState(new Date().getFullYear().toString());
  const [calendarKey, setCalendarKey] = useState(0);
  const [currentMonth, setCurrentMonth] = useState(currentMonthDefault);
  const [transactions, setTransactions] = useState([]);
  const [expenseData, setExpenseData] = useState([]);
  const [incomeData, setIncomeData] = useState([]);
  const [markedDates, setMarkedDates] = useState({});

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await fetch(`https://1fc4-2409-40f4-3010-44db-483-9915-3dd2-2826.ngrok-free.app/transactions`);
        const text = await response.text();
        console.log("Raw Response:", text);

        const data = JSON.parse(text);
        console.log("Parsed JSON:", data);

        const filteredData = data.filter((item) => item.date.startsWith(`${searchYear}-${searchMonth}`));
        setTransactions(filteredData);
        setExpenseData(formatData(filteredData.filter(item => item.type === "Expense")));
        setIncomeData(formatData(filteredData.filter(item => item.type === "Income")));
        setMarkedDates(generateMarkedDates(filteredData));

      } catch (error) {
        console.error("Error fetching transactions:", error);
      }
    };

    fetchTransactions();
  }, [searchMonth, searchYear]);

  const formatData = (transactions) => {
    const categories = {};

    transactions.forEach((transaction) => {
      if (categories[transaction.subType]) {
        categories[transaction.subType] += transaction.amount;
      } else {
        categories[transaction.subType] = transaction.amount;
      }
    });

    const formattedData = Object.keys(categories).map((key) => ({
      name: key,
      amount: categories[key],
      color: getRandomColor(),
      legendFontColor: '#7F7F7F',
      legendFontSize: 12,
    }));

    return formattedData.length > 0 ? formattedData : [{ name: 'No Data', amount: 1, color: '#ccc', legendFontColor: '#7F7F7F', legendFontSize: 12 }];
  };

  const getRandomColor = () => {
    return '#' + Math.floor(Math.random() * 16777215).toString(16);
  };

  const handleDayPress = (day) => {
    setSelectedDate(day.dateString);
    navigation.navigate('DateExpenses', { selectedDate: day.dateString });
  };

  const handleSearch = () => {
    if (searchYear && searchMonth) {
      const newMonth = `${searchYear}-${searchMonth.padStart(2, '0')}`;
      setCurrentMonth(newMonth);
      setCalendarKey((prevKey) => prevKey + 1);
    }
  };

  const resetToCurrentDate = () => {
    setSelectedDate(today);
    setCurrentMonth(currentMonthDefault);
    setCalendarKey((prevKey) => prevKey + 1);
  };

  const generateMarkedDates = (transactions) => {
    let marked = {};

    transactions.forEach((item) => {
      const { date, type, amount } = item;
      if (!marked[date]) marked[date] = { income: 0, investment: 0, expense: 0 };

      if (type === "Income") marked[date].income += amount;
      else if (type === "Investment") marked[date].investment += amount;
      else if (type === "Expense") marked[date].expense += amount;
    });

    let finalMarked = {};
    Object.keys(marked).forEach((date) => {
      const { income, investment, expense } = marked[date];
      let maxCategory = 'black';

      if (income > investment && income > expense) maxCategory = 'green';
      else if (investment > income && investment > expense) maxCategory = 'blue';
      else if (expense > income && expense > investment) maxCategory = 'red';

      finalMarked[date] = { selected: true, selectedColor: maxCategory };
    });

    return finalMarked;
  };

  const getMonthName = (monthNum) => {
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    return months[parseInt(monthNum, 10) - 1];
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.searchContainer}>
        <View style={styles.inlineRow}>
          <View style={styles.pickerContainer}>
            <Picker selectedValue={searchMonth} onValueChange={setSearchMonth} style={styles.picker}>
              {['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'].map((month, index) => (
                <Picker.Item key={month} label={getMonthName(month)} value={month} />
              ))}
            </Picker>
          </View>

          <View style={styles.pickerContainer}>
            <Picker selectedValue={searchYear} onValueChange={setSearchYear} style={styles.picker}>
              {Array.from({ length: 25 }, (_, i) => (new Date().getFullYear() + i).toString()).map((year) => (
                <Picker.Item key={year} label={year} value={year} />
              ))}
            </Picker>
          </View>

          <TouchableOpacity onPress={handleSearch} style={styles.searchButton}>
            <Text style={styles.buttonText}>Search</Text>
          </TouchableOpacity>

          <TouchableOpacity onPress={resetToCurrentDate} style={styles.resetButton}>
            <Text style={styles.buttonText}>Today</Text>
          </TouchableOpacity>
        </View>
      </View>

      <Calendar
        key={calendarKey}
        current={currentMonth}
        onDayPress={handleDayPress}
        markedDates={markedDates}
        monthFormat={'MMMM yyyy'}
        hideExtraDays
        enableSwipeMonths
      />
    <View style={styles.searchContainer}>
    <View style={styles.inlineRow}>
        <TouchableOpacity style={styles.incomeButton} onPress={() => navigation.navigate('Income')}>
          <Text style={styles.buttonText}>Income</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.investmentButton} onPress={() => navigation.navigate('Investment')}>
          <Text style={styles.buttonText}>Investment</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.expenseButton} onPress={() => navigation.navigate('Expenses')}>
          <Text style={styles.buttonText}>Expenses</Text>
        </TouchableOpacity>
      </View>

      </View>
      <Swiper style={{ height: 250 }} showsPagination>
        <View style={styles.chartContainer}>
          <Text style={styles.chartTitle}>{getMonthName(searchMonth)} Expenses {searchYear}</Text>
          <PieChart data={expenseData} width={screenWidth - 40} height={200} chartConfig={chartConfig} accessor={'amount'} backgroundColor={'transparent'} paddingLeft={'15'} />
        </View>
        <View style={styles.chartContainer}>
          <Text style={styles.chartTitle}>{getMonthName(searchMonth)} Income {searchYear}</Text>
          <PieChart data={incomeData.filter(item => item.name === "Active" || item.name === "Passive")} width={screenWidth - 40} height={200} chartConfig={chartConfig} accessor={'amount'} backgroundColor={'transparent'} paddingLeft={'15'} />
        </View>
      </Swiper>
    </ScrollView>
  );
};

const chartConfig = { backgroundGradientFrom: '#fff', backgroundGradientTo: '#fff', color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})` };

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  searchContainer: { padding: 10 },
  inlineRow: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' },
  pickerContainer: { flex: 1, marginHorizontal: 5, borderWidth: 1, borderColor: '#ccc', borderRadius: 10, backgroundColor: '#fff' },
  picker: { height: 50, width: '100%' },
  searchButton: { backgroundColor: '#007AFF', padding: 10, borderRadius: 10, alignItems: 'center' },
  resetButton: { backgroundColor: '#00A86B', padding: 10, borderRadius: 10, alignItems: 'center' },
  buttonText: { color: 'white', fontWeight: 'bold' },
  chartContainer: { alignItems: 'center', marginVertical: 10 },
  chartTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 },
  buttonContainer: { flexDirection: 'row', justifyContent: 'space-around', marginVertical: 10 },
  actionButton: { padding: 10, borderRadius: 10, alignItems: 'center', width: '30%' },
  incomeButton: { backgroundColor: 'green', padding: 10, borderRadius: 10, width: 100, alignItems: 'center' },
  investmentButton: { backgroundColor: 'blue', padding: 10, borderRadius: 10, width: 100, alignItems: 'center' },
  expenseButton: { backgroundColor: 'red', padding: 10, borderRadius: 10, width: 100, alignItems: 'center' },
  buttonText: { color: 'white', fontWeight: 'bold', fontSize: 18 },
    
  });

export default CalendarMain;
